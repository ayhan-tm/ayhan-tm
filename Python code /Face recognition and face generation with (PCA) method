#!/usr/bin/env python
# coding: utf-8

# In[91]:


import os
import numpy as np
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.neighbors import NearestNeighbors
from PIL import Image


# In[92]:


# Data Preparation !!! " Add the Data Set location on your PC "

image_folder = "/data_set"


# In[93]:


# Loads the first 1000 images (" you can adjust as needed ")

num_images = 10000
images = []
for i in range(num_images):
    img_path = os.path.join(image_folder, f'{i+1:06d}.jpg')
    img = Image.open(img_path).convert('L')
    img = img.resize((64, 64))  
    images.append(np.array(img).flatten())  # -> Converts each image into a 1D vector
    X = np.array(images)


# In[94]:


# 2. PCA Analysis
# Centers the data
X_centered = X - X.mean(axis=0)

# Perform PCA
pca = PCA()
pca.fit(X_centered)


# 3. Face Reconstruction
# Reconstructs faces using a different number of basic components
n_components = [20, 30, 40, 50]
reconstructed_faces = []

for n in n_components:
    pca = PCA(n_components=n)
    X_projected = pca.fit_transform(X_centered)
    X_reconstructed = pca.inverse_transform(X_projected)
    reconstructed_faces.append(X_reconstructed[0].reshape(64, 64))  # Reshape the reconstructed face

# Draws original and reconstructed average faces
fig, axes = plt.subplots(2, len(n_components) + 1, figsize=(15, 6))
fig.suptitle('Face Reconstruction with PCA', fontsize=20)
axes[0, 0].imshow(X.mean(axis=0).reshape(64, 64), cmap='gray')
axes[0, 0].set_title('Mean Face')
axes[1, 0].imshow(X[0].reshape(64, 64), cmap='gray')
axes[1, 0].set_title('Original Face')

for i, n in enumerate(n_components):
    axes[0, i + 1].imshow(reconstructed_faces[i], cmap='gray')
    axes[0, i + 1].set_title(f'Reconstructed (n={n})')
    axes[1, i + 1].imshow(X_reconstructed[0].reshape(64, 64), cmap='gray')  # Use the same reconstructed face for comparison
    axes[1, i + 1].set_title(f'Original (n={n})')

for ax in axes.ravel():
    ax.axis('off')

plt.tight_layout()
plt.show()

# 4. Project Your Face 
# (" Add the Face IMAGE location on your PC ")

your_face = np.array(Image.open("your_face/dataset").convert('L').resize((64, 64))).flatten()
X_all = np.concatenate((X, [your_face]), axis=0)
X_all_centered = X_all - X_all.mean(axis=0)

pca = PCA()
pca.fit(X_all_centered)
X_all_projected = pca.transform(X_all_centered)

# Finds the nearest famous face
neigh = NearestNeighbors(n_neighbors=1)
neigh.fit(X_all_projected[:-1])
distances, indices = neigh.kneighbors([X_all_projected[-1]])
closest_celebrity = X[indices[0][0]].reshape(64, 64)


# In[95]:


# 5. Random Face Generation
# Generates random faces by manipulating basic components
pca = PCA(n_components=50)
pca.fit(X_centered)
X_projected = pca.transform(X_centered)

# Generates random faces
random_faces = []
for _ in range(5):
    random_coefficients = np.random.uniform(-3, 3, size=(50,))
    random_face = pca.inverse_transform([random_coefficients]).reshape(64, 64)
    random_faces.append(random_face)


# In[96]:


# 6. Evaluation
# Evaluates the accuracy of reconstruction
mse = np.mean((X.mean(axis=0).reshape(4096,) - reconstructed_faces[0].reshape(4096,)) ** 2)
print(f'Reconstruction MSE (20 components): {mse:.4f}')

# Evaluate generated faces
fig, axes = plt.subplots(1, 5, figsize=(12, 3))
fig.suptitle('Randomly Generated Faces', fontsize=18)
for i, face in enumerate(random_faces):
    axes[i].imshow(face, cmap='gray')
    axes[i].axis('off')

plt.tight_layout()
plt.show()
